<<<<<<< HEAD
```
### Summary data table, aggregated by states.
This data table displays each state that had a recorded shooting in 2016 next to the sum of the people who died in those shootings. It is worth noting that only `r num.states.people.died` out of 50 states had deaths from shootings. Additionally, the states with the most deaths due to shootings in 2016, Florida, Texas and California are all large states with large populations, which may have impacted the likelihood of a shooting and the chance of it occurring in a population center.
```{r echo=FALSE}
## Filter data for the table and separate out values from the data row.
specific.shooting.NewOrleans.sep11 <- filter(shootings.2016.data, city == 'New Orleans', date == 'September 11, 2016')
shooting.date <- specific.shooting.NewOrleans.sep11[1,1]
shooting.city <- specific.shooting.NewOrleans.sep11[1,2]
shooting.state <-specific.shooting.NewOrleans.sep11[1,3]
num.injured <- specific.shooting.NewOrleans.sep11[1,4]
num.killed <- specific.shooting.NewOrleans.sep11[1,5]
```
### Specific Incident: `r shooting.city`, `r shooting.state` on `r shooting.date`
On `r shooting.date`, `r num.injured` people were injured and `r num.killed` person was killed in `r shooting.city`, `r shooting.state`. Initial reports indicated a triple shooting in the area of First and South Derbigny streets, with police issuing an alert about the shooting at about 8:30 p.m. Reports differ about the number of people shot, between five and six. The shooter then opened fire at someone who was halfway down the block near an apartment complex. Bystanders were also struck, including one person in a wheelchair. [(Source)](http://www.nola.com/crime/index.ssf/2016/09/6_wounded_by_gunfire_in_centra.html)
<br>
<br>
<br>
<br>
<br>
<br>
```{r echo=FALSE, include=FALSE}
#Geo-styling
graph <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("#7094db"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("gray"),
countrycolor = toRGB("gray")
)
## Plot
plot <- plot_geo(shooting.data.with.sum.of.affected.people, locationmode = 'USA-states', sizes = c(6,300)) %>% add_markers(x = ~lng, y = ~lat, size = ~sum.affected.people, hoverinfo = "text", color=~killed,
text = ~paste(shooting.data.with.sum.of.affected.people$city, ", ", shooting.data.with.sum.of.affected.people$state,
"<br />", shooting.data.with.sum.of.affected.people$killed, " people killed <br />",
shooting.data.with.sum.of.affected.people$injured, " people injured <br /> Occurred on ",
shooting.data.with.sum.of.affected.people$date, sep=""), colors = 'RdBu') %>% layout(title = '2016 US
Shootings Map By Number of Affected People<br>', geo = graph)
```
`r plot`
Note: "Affected people" refers to the sum of people who were injured and killed in each shooting.
<br>
<br>
<br>
<br>
<br>
```{r, echo=FALSE, include=FALSE}
### Interactive map of my choice -- People killed and injured counts across months of the year
### Break date string into tokens
shooting.2016.with.months <- mutate(shootings.2016.data, month = strsplit(shootings.2016.data$date, " "))
## Break month token out of vector
GetMonthToken <- function(row.number) {
return(shooting.2016.with.months$month[[row.number]][1])
}
### Run function to get all months
months <- lapply(1:(nrow(shooting.2016.with.months)), GetMonthToken)
### Add months column
shooting.2016.with.months$month <- unlist(months)
### Group by month -- shows num killed, injured, and the month
#### This code uses my months vector to create factors and re-organize the months by their order in the calendar.
#### Also sums up number of people killed and injured by month using dplyr.
months.vector <- c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')
grouped.month.shooting.data <- shooting.2016.with.months %>% group_by(month) %>% summarize(killed.per.month = sum(killed), injured.per.month = sum(injured)) %>% mutate(Months = factor(month, levels = months.vector)) %>%  ungroup() %>% arrange(Months) %>% select(month, killed.per.month, injured.per.month)
### Get data to put in summary paragraph
month.most.shooting.deaths <- filter(grouped.month.shooting.data, killed.per.month == max(killed.per.month))[[1]]
month.most.shooting.injuries <- filter(grouped.month.shooting.data, injured.per.month == max(injured.per.month))[[1]]
month.least.shooting.deaths <- filter(grouped.month.shooting.data, killed.per.month == min(killed.per.month))[[1]]
month.least.shooting.injuries <- filter(grouped.month.shooting.data, injured.per.month == min(injured.per.month))[[1]]
NumberAffected <- c("Number of People Killed" = grouped.month.shooting.data$killed.per.month, "Number of People Injured" = grouped.month.shooting.data$injured.per.month)
Type <-c(rep("People Killed", 12), rep("People Injured", 12))
data.for.graph <-data.frame(months.vector, NumberAffected)
data.for.graph$Month <-factor(data.for.graph$month, levels = months.vector)
p <-ggplot(data.for.graph, aes(Month, NumberAffected)) + geom_bar(stat = "identity", aes(fill = Type), position=position_dodge()) +
xlab("Month") + ylab("Number of People") +
ggtitle("People Killed and Injured in Shootings in 2016 by Month") + scale_fill_manual(values=c("#9999ff", "#ff6666")) + theme(axis.text.x = element_text(angle = 20, hjust = 1))
p <- ggplotly(p)
```
`r p`
### Interactive Plot of 2016 Shootings Data by Month (USA)
A bar chart was chosen to display this information because it can easily display data across several distinct time increments (in this case, months) while showing multiple datasets about each increment (injured and killed persons.) This allows the viewer to get a sense of how shooting-related deaths and injuries vary across the year. Based on the graph, the 2016 summers had high shooting rates, with `r month.most.shooting.deaths` having the most deaths caused by shootings and `r month.most.shooting.injuries` having the most injuries from shootings. `r month.least.shooting.deaths` had the fewest deaths caused by shootings and `r month.least.shooting.injuries` had the fewest injuries caused by shootings.
<br><br>
</center>
---
title: "a6 - Mapping 2016 Shootings"
output: html_document
---
<center>
```{r setup, echo=FALSE, include=FALSE}
library(dplyr)
library(knitr)
library(plotly)
library(ggplot2)
## Read in data
shootings.2016.data <- read.csv(file='data/shootings-2016.csv', stringsAsFactors = FALSE)
## Shootings occurred count
num.shootings.occurred <- nrow(shootings.2016.data)
## Lives lost count
num.lives.lost <- (select(shootings.2016.data, killed) %>% mutate(fin = sum(killed)))[1,2]
## Most affected cities based on cities with top 5 highest injured + killed people
shooting.data.with.sum.of.affected.people <- mutate(shootings.2016.data, sum.affected.people = injured + killed)
cities.most.affected <- aggregate(shooting.data.with.sum.of.affected.people$sum.affected.people, by=list(city=shootings.2016.data$city), FUN=sum) %>% arrange(desc(x))
### Takes in a number that is the ranking of the city, lower numbers being worse
GetAffectedCityWithCount <- function(rank.number) {
city <- cities.most.affected[rank.number, 1]
city.people.affected <- cities.most.affected[rank.number, 2]
return(paste(city, " (", city.people.affected, ")", sep=""))
}
first.affected.city <- GetAffectedCityWithCount(1)
second.affected.city <- GetAffectedCityWithCount(2)
third.affected.city <- GetAffectedCityWithCount(3)
fourth.affected.city <- GetAffectedCityWithCount(4)
fifth.affected.city <- GetAffectedCityWithCount(5)
## Insight of my choice: States with the most shootings
states.most.shootings <- shootings.2016.data %>% group_by(state) %>% tally() %>% arrange(desc(n))
GetStateShootingsCount <- function(rank.number) {
state <- states.most.shootings[rank.number, 1]
state.shooting.num <- states.most.shootings[rank.number, 2]
return(paste(state, " (", state.shooting.num, ")", sep=""))
}
first.most.shooting.state <- GetStateShootingsCount(1)
second.most.shooting.state <- GetStateShootingsCount(2)
third.most.shooting.state <- GetStateShootingsCount(3)
```
### Here is some summary data about the 2016 shootings data set.
Overall, `r num.shootings.occurred` shootings occurred in the U.S. in 2016. In those shootings, `r num.lives.lost` people lost their lives. Some of the cities that were most affected, based on the sum of people who were killed and injured in each city, were `r first.affected.city`, `r second.affected.city`, `r third.affected.city`, `r fourth.affected.city`, and `r fifth.affected.city`. The top three states with the most shootings by instance were `r first.most.shooting.state`, `r second.most.shooting.state`, and `r third.most.shooting.state`.
```{r echo=FALSE}
# Summary Table - create, aggregated by state and num killed
summary.table <- aggregate(shootings.2016.data$killed, by=list(State=shootings.2016.data$state), FUN=sum) %>% mutate(Number.Of.Deaths = x) %>% select(State, Number.Of.Deaths) %>%arrange(-Number.Of.Deaths)
num.states.people.died <- nrow(summary.table)
## Display table, modifying 2nd column name for better format
kable(summary.table, col.names = c("State", "Number of Deaths"))
```
### Summary data table, aggregated by states.
This data table displays each state that had a recorded shooting in 2016 next to the sum of the people who died in those shootings. It is worth noting that only `r num.states.people.died` out of 50 states had deaths from shootings. Additionally, the states with the most deaths due to shootings in 2016, Florida, Texas and California are all large states with large populations, which may have impacted the likelihood of a shooting and the chance of it occurring in a population center.
```{r echo=FALSE}
## Filter data for the table and separate out values from the data row.
specific.shooting.NewOrleans.sep11 <- filter(shootings.2016.data, city == 'New Orleans', date == 'September 11, 2016')
shooting.date <- specific.shooting.NewOrleans.sep11[1,1]
shooting.city <- specific.shooting.NewOrleans.sep11[1,2]
shooting.state <-specific.shooting.NewOrleans.sep11[1,3]
num.injured <- specific.shooting.NewOrleans.sep11[1,4]
num.killed <- specific.shooting.NewOrleans.sep11[1,5]
```
### Specific Incident: `r shooting.city`, `r shooting.state` on `r shooting.date`
On `r shooting.date`, `r num.injured` people were injured and `r num.killed` person was killed in `r shooting.city`, `r shooting.state`. Initial reports indicated a triple shooting in the area of First and South Derbigny streets, with police issuing an alert about the shooting at about 8:30 p.m. Reports differ about the number of people shot, between five and six. The shooter then opened fire at someone who was halfway down the block near an apartment complex. Bystanders were also struck, including one person in a wheelchair. [(Source)](http://www.nola.com/crime/index.ssf/2016/09/6_wounded_by_gunfire_in_centra.html)
<br>
<br>
<br>
<br>
<br>
<br>
```{r echo=FALSE, include=FALSE}
#Geo-styling
graph <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("#7094db"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("gray"),
countrycolor = toRGB("gray")
)
## Plot
plot <- plot_geo(shooting.data.with.sum.of.affected.people, locationmode = 'USA-states', sizes = c(6,300)) %>% add_markers(x = ~lng, y = ~lat, size = ~sum.affected.people, hoverinfo = "text", color=~killed,
text = ~paste(shooting.data.with.sum.of.affected.people$city, ", ", shooting.data.with.sum.of.affected.people$state,
"<br />", shooting.data.with.sum.of.affected.people$killed, " people killed <br />",
shooting.data.with.sum.of.affected.people$injured, " people injured <br /> Occurred on ",
shooting.data.with.sum.of.affected.people$date, sep=""), colors = 'RdBu') %>% layout(title = '2016 US
Shootings Map By Number of Affected People<br>', geo = graph)
```
`r plot`
Note: "Affected people" refers to the sum of people who were injured and killed in each shooting.
<br>
<br>
<br>
<br>
<br>
```{r, echo=FALSE, include=FALSE}
### Interactive map of my choice -- People killed and injured counts across months of the year
### Break date string into tokens
shooting.2016.with.months <- mutate(shootings.2016.data, month = strsplit(shootings.2016.data$date, " "))
## Break month token out of vector
GetMonthToken <- function(row.number) {
return(shooting.2016.with.months$month[[row.number]][1])
=======
BuildScatter <- function(data.movies, xvar = 'budget', yvar = 'domgross') {
## Fix chr type columns
data.movies$domgross <- as.integer(as.character(data.movies$domgross))
data.movies$intgross <- as.integer(as.character(data.movies$intgross))
data.movies <- filter(data.movies, xvar != '#N/A', yvar != '#N/A')
# Get x and y max -- Code adapted from graph given in m18 exercise
xmax <- max(data.movies[,xvar]) * 1.1
ymax <- max(data.movies[,yvar]) * 1.1
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
plot_ly(data=data.movies, color = ~binary, colors = c("red", "green"),
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode = 'markers',
marker = list(
opacity = .4,
size = 2
)) %>%
layout(title = paste(FixAxisLabels(xvar), "Vs.", FixAxisLabels(yvar), "Bechdel Financial Analysis"), xaxis = list(range = c(0, xmax), title = FixAxisLabels(xvar)),
yaxis = list(range = c(0, ymax), title = FixAxisLabels(yvar))
) %>%
return()
}
# Fixes capitalization and short-hand names in the data set for display
FixAxisLabels <- function(input.var.name) {
if (input.var.name == "domgross") { input.var.name <- "Domestic Gross"}
if (input.var.name == "intgross") { input.var.name <- "International Gross"}
input.var.name <- capitalize(input.var.name)
return(input.var.name)
>>>>>>> b5f96e23ba3bee300bc460098a73bec91791ef52
}
### Run function to get all months
months <- lapply(1:(nrow(shooting.2016.with.months)), GetMonthToken)
### Add months column
shooting.2016.with.months$month <- unlist(months)
### Group by month -- shows num killed, injured, and the month
#### This code uses my months vector to create factors and re-organize the months by their order in the calendar.
#### Also sums up number of people killed and injured by month using dplyr.
months.vector <- c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')
grouped.month.shooting.data <- shooting.2016.with.months %>% group_by(month) %>% summarize(killed.per.month = sum(killed), injured.per.month = sum(injured)) %>% mutate(Months = factor(month, levels = months.vector)) %>%  ungroup() %>% arrange(Months) %>% select(month, killed.per.month, injured.per.month)
### Get data to put in summary paragraph
month.most.shooting.deaths <- filter(grouped.month.shooting.data, killed.per.month == max(killed.per.month))[[1]]
month.most.shooting.injuries <- filter(grouped.month.shooting.data, injured.per.month == max(injured.per.month))[[1]]
month.least.shooting.deaths <- filter(grouped.month.shooting.data, killed.per.month == min(killed.per.month))[[1]]
month.least.shooting.injuries <- filter(grouped.month.shooting.data, injured.per.month == min(injured.per.month))[[1]]
NumberAffected <- c("Number of People Killed" = grouped.month.shooting.data$killed.per.month, "Number of People Injured" = grouped.month.shooting.data$injured.per.month)
Type <-c(rep("People Killed", 12), rep("People Injured", 12))
data.for.graph <-data.frame(months.vector, NumberAffected)
data.for.graph$Month <-factor(data.for.graph$month, levels = months.vector)
p <-ggplot(data.for.graph, aes(Month, NumberAffected)) + geom_bar(stat = "identity", aes(fill = Type), position=position_dodge()) +
xlab("Month") + ylab("Number of People") +
ggtitle("People Killed and Injured in Shootings in 2016 by Month") + scale_fill_manual(values=c("#9999ff", "#ff6666")) + theme(axis.text.x = element_text(angle = 20, hjust = 1))
p <- ggplotly(p)
```
`r p`
### Interactive Plot of 2016 Shootings Data by Month (USA)
A bar chart was chosen to display this information because it can easily display data across several distinct time increments (in this case, months) while showing multiple datasets about each increment (injured and killed persons.) This allows the viewer to get a sense of how shooting-related deaths and injuries vary across the year. Based on the graph, the 2016 summers had high shooting rates, with `r month.most.shooting.deaths` having the most deaths caused by shootings and `r month.most.shooting.injuries` having the most injuries from shootings. `r month.least.shooting.deaths` had the fewest deaths caused by shootings and `r month.least.shooting.injuries` had the fewest injuries caused by shootings. From this graph, we can see that summer time seems to be the peak season for shootings in terms of number of people killed and injured in them.
<br><br>
</center>
data.for.graph
---
title: "a6 - Mapping 2016 Shootings"
output: html_document
---
<center>
```{r setup, echo=FALSE, include=FALSE}
library(dplyr)
library(knitr)
library(plotly)
library(ggplot2)
## Read in data
shootings.2016.data <- read.csv(file='data/shootings-2016.csv', stringsAsFactors = FALSE)
## Shootings occurred count
num.shootings.occurred <- nrow(shootings.2016.data)
## Lives lost count
num.lives.lost <- (select(shootings.2016.data, killed) %>% mutate(fin = sum(killed)))[1,2]
## Most affected cities based on cities with top 5 highest injured + killed people
shooting.data.with.sum.of.affected.people <- mutate(shootings.2016.data, sum.affected.people = injured + killed)
cities.most.affected <- aggregate(shooting.data.with.sum.of.affected.people$sum.affected.people, by=list(city=shootings.2016.data$city), FUN=sum) %>% arrange(desc(x))
### Takes in a number that is the ranking of the city, lower numbers being worse
GetAffectedCityWithCount <- function(rank.number) {
city <- cities.most.affected[rank.number, 1]
city.people.affected <- cities.most.affected[rank.number, 2]
return(paste(city, " (", city.people.affected, ")", sep=""))
}
first.affected.city <- GetAffectedCityWithCount(1)
second.affected.city <- GetAffectedCityWithCount(2)
third.affected.city <- GetAffectedCityWithCount(3)
fourth.affected.city <- GetAffectedCityWithCount(4)
fifth.affected.city <- GetAffectedCityWithCount(5)
## Insight of my choice: States with the most shootings
states.most.shootings <- shootings.2016.data %>% group_by(state) %>% tally() %>% arrange(desc(n))
GetStateShootingsCount <- function(rank.number) {
state <- states.most.shootings[rank.number, 1]
state.shooting.num <- states.most.shootings[rank.number, 2]
return(paste(state, " (", state.shooting.num, ")", sep=""))
}
first.most.shooting.state <- GetStateShootingsCount(1)
second.most.shooting.state <- GetStateShootingsCount(2)
third.most.shooting.state <- GetStateShootingsCount(3)
```
### Here is some summary data about the 2016 shootings data set.
Overall, `r num.shootings.occurred` shootings occurred in the U.S. in 2016. In those shootings, `r num.lives.lost` people lost their lives. Some of the cities that were most affected, based on the sum of people who were killed and injured in each city, were `r first.affected.city`, `r second.affected.city`, `r third.affected.city`, `r fourth.affected.city`, and `r fifth.affected.city`. The top three states with the most shootings by instance were `r first.most.shooting.state`, `r second.most.shooting.state`, and `r third.most.shooting.state`.
```{r echo=FALSE}
# Summary Table - create, aggregated by state and num killed
summary.table <- aggregate(shootings.2016.data$killed, by=list(State=shootings.2016.data$state), FUN=sum) %>% mutate(Number.Of.Deaths = x) %>% select(State, Number.Of.Deaths) %>%arrange(-Number.Of.Deaths)
num.states.people.died <- nrow(summary.table)
## Display table, modifying 2nd column name for better format
kable(summary.table, col.names = c("State", "Number of Deaths"))
```
### Summary data table, aggregated by states.
This data table displays each state that had a recorded shooting in 2016 next to the sum of the people who died in those shootings. It is worth noting that only `r num.states.people.died` out of 50 states had deaths from shootings. Additionally, the states with the most deaths due to shootings in 2016, Florida, Texas and California are all large states with large populations, which may have impacted the likelihood of a shooting and the chance of it occurring in a population center.
```{r echo=FALSE}
## Filter data for the table and separate out values from the data row.
specific.shooting.NewOrleans.sep11 <- filter(shootings.2016.data, city == 'New Orleans', date == 'September 11, 2016')
shooting.date <- specific.shooting.NewOrleans.sep11[1,1]
shooting.city <- specific.shooting.NewOrleans.sep11[1,2]
shooting.state <-specific.shooting.NewOrleans.sep11[1,3]
num.injured <- specific.shooting.NewOrleans.sep11[1,4]
num.killed <- specific.shooting.NewOrleans.sep11[1,5]
```
### Specific Incident: `r shooting.city`, `r shooting.state` on `r shooting.date`
On `r shooting.date`, `r num.injured` people were injured and `r num.killed` person was killed in `r shooting.city`, `r shooting.state`. Initial reports indicated a triple shooting in the area of First and South Derbigny streets, with police issuing an alert about the shooting at about 8:30 p.m. Reports differ about the number of people shot, between five and six. The shooter then opened fire at someone who was halfway down the block near an apartment complex. Bystanders were also struck, including one person in a wheelchair. [(Source)](http://www.nola.com/crime/index.ssf/2016/09/6_wounded_by_gunfire_in_centra.html)
<br><br><br><br><br><br>
```{r echo=FALSE, include=FALSE}
#Geo-styling
graph.of.USA.map.2016.shootings <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("#7094db"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("gray"),
countrycolor = toRGB("gray")
)
## Plot
plot.2016.shootings.map <- plot_geo(shooting.data.with.sum.of.affected.people, locationmode = 'USA-states', sizes = c(6,300)) %>% add_markers(x = ~lng, y = ~lat, size = ~sum.affected.people, hoverinfo = "text", color=~killed,
text = ~paste(shooting.data.with.sum.of.affected.people$city, ", ", shooting.data.with.sum.of.affected.people$state,
"<br />", shooting.data.with.sum.of.affected.people$killed, " people killed <br />",
shooting.data.with.sum.of.affected.people$injured, " people injured <br /> Occurred on ",
shooting.data.with.sum.of.affected.people$date, sep=""), colors = 'RdBu') %>% layout(title = '2016 US
Shootings Map By Number of Affected People<br>', geo = graph.of.USA.map.2016.shootings)
```
`r plot.2016.shootings.map`
Note: "Affected people" refers to the sum of people who were injured and killed in each shooting.
<br>
<br>
<br>
<br>
<br>
```{r, echo=FALSE, include=FALSE}
### Interactive map of my choice -- People killed and injured counts across months of the year
### Break date string into tokens
shooting.2016.with.months <- mutate(shootings.2016.data, month = strsplit(shootings.2016.data$date, " "))
## Break month token out of vector
GetMonthToken <- function(row.number) {
return(shooting.2016.with.months$month[[row.number]][1])
}
### Run function to get all months
months <- lapply(1:(nrow(shooting.2016.with.months)), GetMonthToken)
### Add months column
shooting.2016.with.months$month <- unlist(months)
### Group by month -- shows num killed, injured, and the month
#### This code uses my months vector to create factors and re-organize the months by their order in the calendar.
#### Also sums up number of people killed and injured by month using dplyr.
months.vector <- c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')
grouped.month.shooting.data <- shooting.2016.with.months %>% group_by(month) %>% summarize(killed.per.month = sum(killed), injured.per.month = sum(injured)) %>% mutate(Months = factor(month, levels = months.vector)) %>%  ungroup() %>% arrange(Months) %>% select(month, killed.per.month, injured.per.month)
### Get data to put in summary paragraph
month.most.shooting.deaths <- filter(grouped.month.shooting.data, killed.per.month == max(killed.per.month))[[1]]
month.most.shooting.injuries <- filter(grouped.month.shooting.data, injured.per.month == max(injured.per.month))[[1]]
month.least.shooting.deaths <- filter(grouped.month.shooting.data, killed.per.month == min(killed.per.month))[[1]]
month.least.shooting.injuries <- filter(grouped.month.shooting.data, injured.per.month == min(injured.per.month))[[1]]
NumberAffected <- c("Number of People Killed" = grouped.month.shooting.data$killed.per.month, "Number of People Injured" = grouped.month.shooting.data$injured.per.month)
## Type used to format graph text
Type <-c(rep("People Killed", 12), rep("People Injured", 12))
## Select data for graph, another level of formatting. Then set months as factors so they display in order
data.for.graph <-data.frame(months.vector, NumberAffected)
data.for.graph$Month <-factor(data.for.graph$month, levels = months.vector)
plot.months.with.shootings <-ggplot(data.for.graph, aes(Month, NumberAffected)) + geom_bar(stat = "identity", aes(fill = Type), position=position_dodge()) +
xlab("Month") + ylab("Number of People") +
ggtitle("People Killed and Injured in Shootings in 2016 by Month") + scale_fill_manual(values=c("#9999ff", "#ff6666")) + theme(axis.text.x = element_text(angle = 20, hjust = 1))
## Use ggplot to make graph interactive
plot.months.with.shootings <- ggplotly(plot.months.with.shootings)
```
`r plot.months.with.shootings`
### Interactive Plot of 2016 Shootings Data by Month (USA)
A bar chart was chosen to display this information because it can easily display data across several distinct time increments (in this case, months) while showing multiple datasets about each increment (injured and killed persons.) This allows the viewer to get a sense of how shooting-related deaths and injuries vary across the year. Based on the graph, the 2016 summers had high shooting rates, with `r month.most.shooting.deaths` having the most deaths caused by shootings and `r month.most.shooting.injuries` having the most injuries from shootings. `r month.least.shooting.deaths` had the fewest deaths caused by shootings and `r month.least.shooting.injuries` had the fewest injuries caused by shootings. From this graph, we can see that summer time seems to be the peak season for shootings in terms of number of people killed and injured in them.
<br><br>
x <- 1
print("Why one? Why not 42? Where art why not how there???")
library(rsconnect)
rsconnect::deployApp('~/Documents/School/2016-2017/Spring/INFO 201/a8-building-apps-aamiller')
library(rsconnect)
rsconnect::deployApp('~/Documents/School/2016-2017/Spring/INFO 201/a8-building-apps-aamiller')
library(rsconnect)
rsconnect::deployApp('~/Documents/School/2016-2017/Spring/INFO 201/a8-building-apps-aamiller')
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
library(rvest)
install.packages('rvest')
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidytext)
page <- read_html('https://www.washington.edu/students/crscat/info.html')
# Which words do we use to describe our courses?
all.words %>%
count(word, sort = TRUE) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
all.words <- classes %>% unnest_tokens(word, description)
# Extract descriptions of each course into a dataframe (may take multiple steps)
course.titles <- page %>% html_nodes('p b') %>% html_text() ## paragraph, bold
descriptions <- page %>% html_nodes('p') %>% html_text() ## paragraph
classes <- data.frame(title = course.titles, description = descriptions[2:length(descriptions)], stringsAsFactors = FALSE)
all.words %>%
count(word, sort = TRUE) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
all.words <- classes %>% unnest_tokens(word, description)
all.words %>%
count(word, sort = TRUE) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
all.words %>%
count(word, sort = TRUE) %>%
filter(n > 3) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
View(stop_words)
# Remove stop words by performing an anti_join with the stop_words dataframe
no.stop.words <- all.words %>%
anti_join(all.stop.words, by="word")
# Which non stop-words are most common?
no.stop.words %>%
count(word, sort = TRUE) %>%
filter(n > 3) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
more.stop.words <- data.frame(
word = c("course", "info", "information"),
lexicon = "custom"
)
all.stop.words <- cbind(stop_words, more.stop.words)
# Remove stop words by performing an anti_join with the stop_words dataframe
no.stop.words <- all.words %>%
anti_join(all.stop.words, by="word")
# Which non stop-words are most common?
no.stop.words %>%
count(word, sort = TRUE) %>%
filter(n > 3) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
# Which non stop-words are most common?
no.stop.words %>%
count(word, sort = TRUE) %>%
filter(n > 5) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(ggplot2)
??imdbSeries
??imdb
library(imdb)
install.packages('imdb')
library(ggplot2movies)
install.packages('ggplot2movies')
??gplot2movies
all.movies <- movies
library(ggplot2movies)
all.movies <- movies
View(all.movies)
View(all.movies)
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
setwd("~/Documents/School/2016-2017/Spring/INFO 201/Info201GroupProj")
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
View(bechdel_data_raw)
bechdel_set <- read.csv("./data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("./data/movie_metadata_tojoin.csv", stringsAsFactors = false)
setwd("~/Documents/School/2016-2017/Spring/INFO 201/Info201GroupProj")
library(httr)
library(jsonlite)
library(dplyr)
bechdel_set <- read.csv("./data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("./data/movie_metadata_tojoin.csv", stringsAsFactors = false)
set_to_join <- read.csv("./data/movie_metadata_tojoin.csv", stringsAsFactors = false)
library(httr)
library(jsonlite)
library(dplyr)
bechdel_set <- read.csv("./data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("./data/movie_metadata_tojoin.csv", stringsAsFactors = false)
library(httr)
library(jsonlite)
library(dplyr)
bechdel_set <- read.csv("/data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("/data/movie_metadata_tojoin.csv", stringsAsFactors = false)
library(httr)
library(jsonlite)
library(dplyr)
bechdel_set <- read.csv("/bechdel_data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("/bechdel_data/movie_metadata_tojoin.csv", stringsAsFactors = false)
library(httr)
library(jsonlite)
library(dplyr)
<<<<<<< HEAD
bechdel_set <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("./bechdel_data/movie_metadata_tojoin.csv", stringsAsFactors = false)
bechdel_set <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = false)
library(httr)
library(jsonlite)
library(dplyr)
bechdel_set <- read.csv("/bechdel_data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("/bechdel_data/movie_metadata_tojoin.csv", stringsAsFactors = false)
library(httr)
library(jsonlite)
library(dplyr)
bechdel_set <- read.csv("/bechdel_data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("/bechdel_data/movie_metadata_tojoin.csv", stringsAsFactors = false)
set_to_join <- read.csv("/bechdel_data/movie_metadata_tojoin.csv", stringsAsFactors = false)
setwd("~/Documents/School/2016-2017/Spring/INFO 201/Info201GroupProj")
setwd("~/Documents/School/2016-2017/Spring/INFO 201/Info201GroupProj/script")
library(httr)
library(jsonlite)
library(dplyr)
bechdel_set <- read.csv("/bechdel_data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("/bechdel_data/movie_metadata_tojoin.csv", stringsAsFactors = false)
library(httr)
library(jsonlite)
library(dplyr)
bechdel_set <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = false)
set_to_join <- read.csv("./bechdel_data/movie_metadata_tojoin.csv", stringsAsFactors = false)
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
setwd("~/Documents/School/2016-2017/Spring/INFO 201/Info201GroupProj")
=======
data <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
BuildScatter(data)
### Build Scatter ###
BuildScatter <- function(data.movies, xvar = 'budget', yvar = 'domgross') {
## Fix chr type columns
data.movies$domgross <- as.integer(as.character(data.movies$domgross))
data.movies$intgross <- as.integer(as.character(data.movies$intgross))
data.movies <- filter(data.movies, xvar != '#N/A', yvar != '#N/A')
# Get x and y max -- Code adapted from graph given in m18 exercise
xmax <- max(data.movies[,xvar]) * 1.1
ymax <- max(data.movies[,yvar]) * 1.1
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
plot_ly(data=data.movies, color = ~binary, colors = c("red", "green"),
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode = 'markers',
marker = list(
opacity = .4,
size = 2
)) %>%
layout(title = paste(FixAxisLabels(xvar), "Vs.", FixAxisLabels(yvar), "Bechdel Financial Analysis"), xaxis = list(range = c(0, xmax), title = FixAxisLabels(xvar)),
yaxis = list(range = c(0, ymax), title = FixAxisLabels(yvar))
) %>%
return()
}
# Fixes capitalization and short-hand names in the data set for display
FixAxisLabels <- function(input.var.name) {
print(input.var.name)
if (input.var.name == 'domgross') { input.var.name <- "Domestic Gross"}
if (input.var.name == "intgross") { input.var.name <- "International Gross"}
return(input.var.name)
}
shiny::runApp()
runApp()
runApp()
library(plotly)
#prepare data for page 3
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
source('./script/year.R')
year_data <- year(bechdel_data_raw)
source('./script/profitBechdelAssessment.R')
shinyUI(shinyUI(navbarPage("Bechdel Test",
tabPanel("ADELE", titlePanel('Adjust Rating (PG-13, etc.) Affect Passing Rates?')),
tabPanel("ADELE", titlePanel('Does Profit or Budget Affect Passing Rates?'),
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('scatterVarX', label = 'Variable to Map to X Axis', choices = list('Budget' = 'budget', 'Domestic Gross' = 'domgross', 'International Gross' = 'intgross')),
selectInput('scatterVarY', label = 'Variable to Map to Y Axis', choices = list('Budget' = 'budget', 'Domestic Gross' = 'domgross', 'International Gross' = 'intgross'))
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('profitBechdelAssessment'))
)
),
tabPanel("SHERRI", titlePanel('Does Budget Affect Passing Rates?')),
#tab page 3 by Anni
tabPanel("ANNI", titlePanel('Does Year Made Affect Passing Rates?'),
#page 3 side bar lay out
sidebarLayout(
#page 3 side bar panel
sidebarPanel(
#page 3 check box widget
sliderInput("slider1", label = h3("Slider"), min = year_data$year[44],
max = year_data$year[1], value = c(year_data$year[40], year_data$year[30]))
),
#page 3 main panel
mainPanel(
plotlyOutput('boxgraph')
)
)
)
)
#tabPanel("KEANAN", titlePanel('Does Genre Made Affect Passing Rates?'))
#YOU SHOULD MODIFY THIS FILE BY ADDING YOUR OUTPUT AFTER THE PAGE NAME LIKE THIS:
#tabPanel("Page 1", plotOutput("pg1")) <--I think.....? #
))
movie.data <- read.csv("./bechdel_data/movies.csv", stringsAsFactors =  FALSE)
View(movie.data)
source('./script/year.R')
modified_data <- year(movie.data)
View(modified_data)
modified_data <- modified_data %>%
filter(year >= input$slider[1] & year <= input$slider[2])
runApp()
runApp()
runApp()
library(httr)
library(jsonlite)
library(dplyr)
#find information about each movie by given id number
#example <- "http://www.omdbapi.com/?i=tt3896198&apikey=c53bd0e4"
find_movie <- function(id) {
base.uri <- "http://www.omdbapi.com/?"
query.param <- list(i = id, apikey='23e78b2d')
response <- GET(base.uri, query = query.param)
body <- content(response, "text")
result <- as.data.frame(fromJSON(body))
data <- result[1, ]
#data <- data %>% select(Title, Year, Rated, Genre, Director, Writer, Actors, Plot, Language,
# Country, Awards, Ratings.Source, imdbRating, imdbVotes, imdbID, Production)
return (data)
}
find_movie("tt1711425")
library(httr)
library(jsonlite)
library(dplyr)
#find information about each movie by given id number
#example <- "http://www.omdbapi.com/?i=tt3896198&apikey=c53bd0e4"
find_movie <- function(id) {
base.uri <- "http://www.omdbapi.com/?"
query.param <- list(i = id)
response <- GET(base.uri, query = query.param)
body <- content(response, "text")
result <- as.data.frame(fromJSON(body))
data <- result[1, ]
#data <- data %>% select(Title, Year, Rated, Genre, Director, Writer, Actors, Plot, Language,
# Country, Awards, Ratings.Source, imdbRating, imdbVotes, imdbID, Production)
return (data)
}
find_movie("tt1711425")
runApp()
runApp()
runApp()
>>>>>>> b5f96e23ba3bee300bc460098a73bec91791ef52
