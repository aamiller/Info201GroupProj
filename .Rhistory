library(janeaustenr)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
library(janeaustenr)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
install.packages('janeaustenr')
install.packages('tidytext')
library(janeaustenr)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
booksinfo <- austen_books()
View(booksinfo)
num_books <- unique(booksinfo$book)
num_books
num_books <- unique(length(booksinfo$book))
num_books <- unique(n(booksinfo$book))
num_books <- unique(booksinfo$book)
num_books
most_line <- booksinfo %>%
group_by(book) %>%
summarise(max = max(text))
View(most_line)
most_line <- booksinfo %>%
group_by(book) %>%
summarise(max = max(length(text)))
View(most_line)
most_line <- booksinfo %>%
group_by(book) %>%
summarise(lines = max(length(text))) %>%
arrange(-lines)
View(most_line)
name_of_book <- most_line[1,]
View(name_of_book)
unnest_tokens(booksinfo)
unnest_tokens(booksinfo$text)
unnest_tokens(booksinfo, output = words, input = booksinfo$text)
unnest_tokens(booksinfo, output = words, input = text)
new_book_info <- unnest_tokens(booksinfo, output = words, input = text)
View(new_book_info)
View(new_book_info)
common_words <- new_book_info %>%
group_by(words) %>%
summarise(word = n(length(words))) %>%
arrange(-word)
common_words <- new_book_info %>%
group_by(words) %>%
summarise(word = max(length(words))) %>%
arrange(-word)
View(common_words)
most_common <- common_words[1,]
no_stop_words <- anti_join(common_words)
no_stop_words <- anti_join(common_words, stop_words)
no_stop_words <- anti_join(common_words, stop_words, by = NULL)
no_stop_words <- anti_join(common_words, stop_words, by = "word")
no_stop_words <- anti_join(new_book_info, stop_words)
no_stop_words <- anti_join(new_book_info, stop_words, by = "word")
new_book_info <- unnest_tokens(booksinfo, output = word, input = text)
common_words <- new_book_info %>%
group_by(words) %>%
summarise(word = max(length(words))) %>%
arrange(-word)
most_common <- common_words[1,]
no_stop_words <- anti_join(new_book_info, stop_words, by = "word")
View(no_stop_words)
common_words <- no_stop_words %>%
group_by(word) %>%
summarise(words = max(length(word))) %>%
arrange(-words)
most_common <- common_words[1,]
common_words <- new_book_info %>%
group_by(word) %>%
summarise(words = max(length(word))) %>%
arrange(-words)
most_common <- common_words[1,]
common_words <- no_stop_words %>%
group_by(word) %>%
summarise(words = max(length(word))) %>%
arrange(-words)
most_common_no_stop <- common_words[1,]
View(most_common_no_stop)
no.stop.words %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
no_stop_words %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
install.packages('rvest')
install.packages('rvest')
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
library(rvest)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
library(rvest)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
library(rvest)
page <- read_html('https://www.washington.edu/students/crscat/info.html')
course.titles <- page %>% html_nodes('p b') %>% html_text()
descriptions <- page %>% html_nodes('p') %>% html_text()
classes <- data.frame(title = course.titles, description = descriptions[2:length(descriptions)], stringsAsFactors = FALSE)
num.courses <- nrow(classes)
all.words <- classes %>% unnest_tokens(word, description)
View(all.words)
word.count <- all.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
View(word.count)
more.stop.words <- data.frame(
word = c("course", "info", "information"),
lexicon = "custom"
)
all.stop.words <- cbind(stop_words, more.stop.words)
View(all.stop.words)
no.stop.words <- all.words %>%
anti_join(all.stop.words, by="word")
View(no.stop.words)
non.stop.count <- no.stop.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
# Use ggplot to make a horizontal bar chart of the word frequencies of non-stop words
no.stop.words %>%
count(word, sort = TRUE) %>%
filter(n > 10) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dpylr)
library(dpylr)
library(dplyr)
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info 201 exercises/Info201GroupProj/script")
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
setwd('~/Desktop/info 201 exercises/Info201GroupProj/')
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
View(bechdel_data_raw)
GetNumInYear <- function(input.year) {
num.in.year <- filter(movies.data, year == input.year) %>% tally()
return(num.in.year)
}
GetYearsWithCountAboveInput <- function(input.min) {
all.movies <- sapply(1970:2013, GetNumInYear)
return (sum(all.movies >= input.min))
}
test <- GetNumInYear("2013")
movies.data <- read.csv('./bechdel_data/movies.csv', stringsAsFactors = FALSE)
test <- GetNumInYear("2013")
View(test)
test <- GetNumInYear(2013)
View(test)
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
View(bechdel_data_raw)
dataset <- select(bechdel_data_raw, year, imdb, title, clean_test, binary, budget)
View(dataset)
yearly_dataset <- select(bechdel_data_raw, year, imdb, title, clean_test, binary, budget)
yearly_data <- function(input.year) {
dataset <- yearly_dataset%>%
filter(year == input.year)
failed <- dataset %>%
group_by(binary) %>%
summarise(count = n())
}
test <- yearly_data(2013)
View(test)
yearly_data <- function(input.year) {
pass_or_fail <- yearly_dataset %>%
filter(year == input.year) %>%
group_by(binary) %>%
summarise(count = n(), year = input.year)
return(pass_or_fail)
}
test <- yearly_data(2013)
View(test)
years <- unique(yearly_dataset$year)
source('./script/yearly_data.R')
years <- unique(yearly_dataset$year)
lapply(years, yearly_data)
pass_vs_fail <- ylapply(years, yearly_data)
pass_vs_fail <- lapply(years, yearly_data)
pass_vs_fail_table <- data.frame(pass_vs_fail)
View(pass_vs_fail_table)
View(test)
for (year in years) {
year_num <- yearly_data(year)
full_join(year_num, year, by = "year")
}
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- full_join(test, year_num, by = "year")
}
View(test)
yearly_dataset <- select(bechdel_data_raw, year, imdb, title, clean_test, binary, budget)
source('./script/yearly_data.R')
years <- unique(yearly_dataset$year)
library(dplyr)
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
yearly_dataset <- select(bechdel_data_raw, year, imdb, title, clean_test, binary, budget)
source('./script/yearly_data.R')
years <- unique(yearly_dataset$year)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- full_join(test, year_num, by = "year")
}
View(test)
years <- unique(yearly_dataset$year)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- left_join(test, year_num, by = "year")
}
View(test)
years <- unique(yearly_dataset$year)
test <- yearly_data(2013)
View(test)
for (year in years) {
year_num <- yearly_data(year)
test <- left_join(test, year_num, by = c("binary", "count", "year"))
}
View(test)
for (year in years) {
year_num <- yearly_data(year)
test <- left_join(test, year_num, by = c("binary", "count", "year"))
}
for (year in years) {
year_num <- yearly_data(year)
test <- left_join(test, year_num)
}
for (year in years) {
year_num <- yearly_data(year)
test <- left_join(test, year_num)
}
View(test)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- merge(test, year_num)
}
View(test)
years <- c(2011, 2012)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- merge(test, year_num)
}
View(test)
for (year in years) {
year_num <- yearly_data(year)
test <- merge(test, year_num, by = intersect(names("binary", "count", "year"),
names("binary", "count", "year")))
}
years <- c(2011, 2012)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- merge(test, year_num, by = intersect(names("binary"),
names("binary")))
}
View(test)
years <- c(2011, 2012)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- merge(test, year_num, by = intersect(names("binary"),
names("binary")), by.x = by, by.y = by)
}
View(test)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- merge(test, year_num, by = intersect(names("binary"),
names("binary")), by.x = by, by.y = by)
}
years <- c(2011, 2012)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- merge(test, year_num, by = intersect(names("binary"),
names("binary")), by.x = by, by.y = by)
}
years <- c(2011, 2012)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- inner_join(test, year_num)
}
years <- c(2011, 2012)
test <- yearly_data(2013)
for (year in years) {
year_num <- yearly_data(year)
test <- inner_join(test, year_num)
}
View(test)
years <- c(2011, 2012)
test <- yearly_data(2013)
test <- yearly_data(2012)
View(test)
years <- c(2011, 2012)
test <- yearly_data(2012)
for (year in years) {
year_num <- yearly_data(year)
test <- rbind(test, year_num)
}
View(test)
test <- yearly_data(years[1])
View(test)
years <- unique(yearly_dataset$year)
test <- yearly_data(years[1])
View(test)
for (year in years) {
year_num <- yearly_data(year)
test <- rbind(test, year_num)
}
View(test)
years <- years[2:44]
for (year in years) {
year_num <- yearly_data(year)
test <- rbind(test, year_num)
}
years <- unique(yearly_dataset$year)
test <- yearly_data(years[1])
years <- years[2:44]
for (year in years) {
year_num <- yearly_data(year)
test <- rbind(test, year_num)
}
View(test)
yearly_data <- function(input.year) {
pass_or_fail <- yearly_dataset %>%
filter(year == input.year) %>%
group_by(binary) %>%
summarise(count = n(), year = input.year, total = length(binary))
return(pass_or_fail)
}
years <- unique(yearly_dataset$year)
test <- yearly_data(years[1])
years <- years[2:44]
for (year in years) {
year_num <- yearly_data(year)
test <- rbind(test, year_num)
}
View(test)
yearly_data <- function(input.year) {
pass_or_fail <- yearly_dataset %>%
filter(year == input.year) %>%
summarise(year = input.year, fail = sum(binary == "FAIL"), pass = sum(binary == "PASS"), total = length(binary))
return(pass_or_fail)
}
years <- unique(yearly_dataset$year)
test <- yearly_data(years[1])
years <- years[2:44]
for (year in years) {
year_num <- yearly_data(year)
test <- rbind(test, year_num)
}
View(test)
View(test)
year <- function(input.data) {
yearly_dataset <- input.data
years <- unique(yearly_dataset$year)
test <- yearly_data(years[1])
years <- years[2:44]
for (year in years) {
year_num <- yearly_data(year)
test <- rbind(test, year_num)
}
return(test)
}
shiny::runApp()
runApp()
runApp()
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
source('./script/year.R')
year_data <- year(bechdel_data_raw)
library(plotly)
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
source('./script/year.R')
year_data <- year(bechdel_data_raw)
View(year_data)
runApp()
View(year_data)
paste0(2013)
year_data$year <- paste0(year_data$year)
year_data$year
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
source('./script/year.R')
year_data <- year(bechdel_data_raw)
year_data$year
year_data$year <- paste0(year_data$year)
year_data$year
runApp()
flatten(year_data)
library(jsonlite)
library(jsonlite)
flatten(year_data)
runApp()
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
source('./script/year.R')
year_data <- year(bechdel_data_raw)
rownames(bechdel_data_raw) <- bechdel_data_raw$year
row.names(bechdel_data_raw) <- bechdel_data_raw$year
row.names(bechdel_data_raw) <- paste0(bechdel_data_raw$year)
View(year_data)
rownames(bechdel_data_raw)
year_data <- setNames(as.numeric(year_data$year))
year_data <- setNames(as.numeric(year_data$year), colnames(year_data))
View(yearly_dataset)
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
source('./script/year.R')
year_data <- year(bechdel_data_raw)
year_data <- setNames(as.numeric(year_data$year), colnames(year_data))
View(yearly_dataset)
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
source('./script/year.R')
year_data <- year(bechdel_data_raw)
flatten(year_data)
year_data <- setNames(as.numeric(year_data$year), colnames(year_data))
bechdel_data_raw <- setNames(as.numeric(bechdel_data_raw$year), colnames(bechdel_data_raw))
bechdel_data_raw <- setNames(as.numeric(bechdel_data_raw$year), colnames(bechdel_data_raw))
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
library(plotly)
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
bechdel_data_raw <- setNames(as.numeric(bechdel_data_raw$year), colnames(bechdel_data_raw))
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
bechdel_data_raw <- setNames(as.character(bechdel_data_raw$year), colnames(bechdel_data_raw))
bechdel_data_raw <- read.csv("./bechdel_data/movies.csv", stringsAsFactors = FALSE)
source('./script/year.R')
year_data <- year(bechdel_data_raw)
yearly_data <- function(input.year) {
pass_or_fail <- yearly_dataset %>%
filter(year == input.year) %>%
summarise(year = input.year, fail = sum(binary == "FAIL"), pass = sum(binary == "PASS"),
total = length(binary))
names(pass_or_fail[1,]) <- colnames(pass_or_fail)
return(pass_or_fail)
}
test <- yearly_data(2013)
View(test)
rownames(test)
row.names(test)
runApp()
year_data$year
runApp()
runApp()
runApp()
shiny::runApp()
setwd("C:/Users/thinkpad/Desktop/info 201 exercises/Info201GroupProj")
runApp()
